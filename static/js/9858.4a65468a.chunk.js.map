{"version":3,"file":"static/js/9858.4a65468a.chunk.js","mappings":"2OAWM,MAAOA,UAA4BC,EAAAA,EAEvCC,YAAAC,GAcC,IAAAC,EAAA,IAdW,iBACVC,EAAgB,MAChBC,EAAK,KACLC,EAAI,UACJC,EAAS,OACTC,EAAM,KACNC,GAQDP,EACCQ,MACEL,EAAMM,cACJ,2DACF,CACEN,QACAO,aAAc,IACRP,EAAMO,cAAgB,GACR,QAAlBT,EAAAE,EAAMO,oBAAY,IAAAT,GAAlBA,EAAoBU,OAAS,GAAK,GAClC,yBACAJ,GAAQ,CACN,uBACGA,EAAKK,KAAKC,GAAQ,QAAOC,EAAAA,EAAAA,IAAOD,QAErC,aAAaP,IACb,WAAWF,IACX,wBAAwBF,IACxB,iBAAiBG,KACjBU,SAjCCC,OAAAC,eAAA,a,gDAAO,uBAoChB,EAOI,MAAOC,UAA6CpB,EAAAA,EAExDC,YAAAoB,GAAyD,IAA7C,OAAEC,EAAM,IAAEP,GAAmCM,EACvDX,MACE,6EACA,CACEE,aAAc,CACZ,iBAAgBI,EAAAA,EAAAA,IAAOD,KACvB,cAAaQ,EAAAA,EAAAA,GAAUD,QAPtBJ,OAAAC,eAAA,a,gDAAO,wCAWhB,EAOI,MAAOK,UAA0CxB,EAAAA,EAErDC,YAAAwB,GAA4D,IAAhD,OAAEjB,EAAM,GAAEkB,GAAsCD,EAC1Df,MACE,yEACA,CACEE,aAAc,CACZ,qBAAqBc,IACrB,kCAAkClB,OAPjCU,OAAAC,eAAA,a,gDAAO,qCAWhB,E,qFC/DK,MAAMQ,EAA0B,aAC1BC,EAAwB,CACnCC,KAAM,iBACNC,KAAM,QACNC,OAAQ,CACN,CACEF,KAAM,SACNC,KAAM,WAER,CACED,KAAM,OACNC,KAAM,YAER,CACED,KAAM,WACNC,KAAM,SAER,CACED,KAAM,mBACNC,KAAM,UAER,CACED,KAAM,YACNC,KAAM,WAOLE,eAAeC,EACpBC,EAAiChC,GAShC,IARD,YACEiC,EAAW,SACXC,EAAQ,KACR9B,EAAI,GACJoB,GAIDxB,EAED,MAAM,KAAEmC,IAASC,EAAAA,EAAAA,GAAkB,CACjChC,OACAiC,IAAK,CAACX,MAEDpB,EAAQC,EAAM+B,EAAUpC,EAAkBG,GAAa8B,EAE9D,IACE,IC5DE,SAAyBI,EAAYC,GACzC,KAAKC,EAAAA,EAAAA,GAAUF,EAAG,CAAEG,QAAQ,IAC1B,MAAM,IAAIC,EAAAA,EAAoB,CAAEC,QAASL,IAC3C,KAAKE,EAAAA,EAAAA,GAAUD,EAAG,CAAEE,QAAQ,IAC1B,MAAM,IAAIC,EAAAA,EAAoB,CAAEC,QAASJ,IAC3C,OAAOD,EAAEM,gBAAkBL,EAAEK,aAC/B,CDsDSC,CAAetB,EAAIlB,GACtB,MAAM,IAAIgB,EAAkC,CAAEhB,SAAQkB,OAExD,MAAMJ,QA8BHU,eAAwBX,GAI2B,IAJ1B,KAC9Bf,EAAI,OACJE,EAAM,KACNC,GACwDY,EACpD4B,EAAQ,IAAIC,MAAM,8BAEtB,IAAK,IAAIC,EAAI,EAAGA,EAAI1C,EAAKI,OAAQsC,IAAK,CACpC,MAAMpC,EAAMN,EAAK0C,GACXC,EAASrC,EAAIsC,SAAS,UAAY,MAAQ,OAC1CC,EAAkB,SAAXF,EAAoB,CAAE9C,OAAME,eAAW+C,EAEpD,IAAI,IAAAC,EACF,MAAMC,QAAiBC,MACrB3C,EAAI4C,QAAQ,WAAYnD,GAAQmD,QAAQ,SAAUrD,GAClD,CACEgD,KAAMM,KAAKrC,UAAU+B,GACrBF,WAIJ,IAAI9B,EASJ,GALEA,EAFoC,QADtCkC,EACEC,EAASI,QAAQC,IAAI,uBAAe,IAAAN,GAApCA,EAAsCO,WAAW,2BAEjCN,EAASO,QAAQ1D,WAEjBmD,EAASQ,QAGtBR,EAASS,GAAI,KAAAC,EAChBlB,EAAQ,IAAImB,EAAAA,GAAiB,CAC3Bd,OACAe,QAAe,QAANF,EAAA7C,SAAM,IAAA6C,GAANA,EAAQlB,OACb1B,EAAAA,EAAAA,GAAUD,EAAO2B,OACjBQ,EAASa,WACbT,QAASJ,EAASI,QAClBU,OAAQd,EAASc,OACjBxD,QAEF,QACF,CAEA,KAAKyD,EAAAA,EAAAA,GAAMlD,GAAS,CAClB2B,EAAQ,IAAI7B,EAAqC,CAC/CE,SACAP,QAEF,QACF,CAEA,OAAOO,CACT,CAAE,MAAOmD,GACPxB,EAAQ,IAAImB,EAAAA,GAAiB,CAC3Bd,OACAe,QAAUI,EAAcC,QACxB3D,OAEJ,CACF,CAEA,MAAMkC,CACR,CA5FyB0B,CAAU,CAAErE,KAAMkC,EAAUhC,SAAQC,UAEjDH,KAAMsE,SAAgBC,EAAAA,EAAAA,IAAK3C,EAAQ,CACzCC,cACAC,WACA9B,MAAMwE,EAAAA,EAAAA,IAAO,CACX1E,GACA2E,EAAAA,EAAAA,GACE,CAAC,CAAEjD,KAAM,SAAW,CAAEA,KAAM,UAC5B,CAACR,EAAQf,MAGbmB,OAGF,OAAOkD,CACT,CAAE,MAAOH,GACP,MAAM,IAAI1E,EAAoB,CAC5BK,mBACAC,MAAOoE,EACPnE,OACAC,YACAC,SACAC,QAEJ,CACF,C","sources":["../node_modules/viem/errors/ccip.ts","../node_modules/viem/utils/ccip.ts","../node_modules/viem/utils/address/isAddressEqual.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Hex } from '../types/misc.js'\nimport { stringify } from '../utils/stringify.js'\n\nimport { BaseError } from './base.js'\nimport { getUrl } from './utils.js'\n\nexport type OffchainLookupErrorType = OffchainLookupError & {\n  name: 'OffchainLookupError'\n}\nexport class OffchainLookupError extends BaseError {\n  override name = 'OffchainLookupError'\n  constructor({\n    callbackSelector,\n    cause,\n    data,\n    extraData,\n    sender,\n    urls,\n  }: {\n    callbackSelector: Hex\n    cause: BaseError\n    data: Hex\n    extraData: Hex\n    sender: Address\n    urls: readonly string[]\n  }) {\n    super(\n      cause.shortMessage ||\n        'An error occurred while fetching for an offchain result.',\n      {\n        cause,\n        metaMessages: [\n          ...(cause.metaMessages || []),\n          cause.metaMessages?.length ? '' : [],\n          'Offchain Gateway Call:',\n          urls && [\n            '  Gateway URL(s):',\n            ...urls.map((url) => `    ${getUrl(url)}`),\n          ],\n          `  Sender: ${sender}`,\n          `  Data: ${data}`,\n          `  Callback selector: ${callbackSelector}`,\n          `  Extra data: ${extraData}`,\n        ].flat(),\n      },\n    )\n  }\n}\n\nexport type OffchainLookupResponseMalformedErrorType =\n  OffchainLookupResponseMalformedError & {\n    name: 'OffchainLookupResponseMalformedError'\n  }\nexport class OffchainLookupResponseMalformedError extends BaseError {\n  override name = 'OffchainLookupResponseMalformedError'\n  constructor({ result, url }: { result: any; url: string }) {\n    super(\n      'Offchain gateway response is malformed. Response data must be a hex value.',\n      {\n        metaMessages: [\n          `Gateway URL: ${getUrl(url)}`,\n          `Response: ${stringify(result)}`,\n        ],\n      },\n    )\n  }\n}\n\nexport type OffchainLookupSenderMismatchErrorType =\n  OffchainLookupSenderMismatchError & {\n    name: 'OffchainLookupSenderMismatchError'\n  }\nexport class OffchainLookupSenderMismatchError extends BaseError {\n  override name = 'OffchainLookupSenderMismatchError'\n  constructor({ sender, to }: { sender: Address; to: Address }) {\n    super(\n      'Reverted sender address does not match target contract address (`to`).',\n      {\n        metaMessages: [\n          `Contract address: ${to}`,\n          `OffchainLookup sender address: ${sender}`,\n        ],\n      },\n    )\n  }\n}\n","import type { Abi, Address } from 'abitype'\n\nimport { type CallParameters, call } from '../actions/public/call.js'\nimport type { Transport } from '../clients/transports/createTransport.js'\nimport { type BaseError } from '../errors/base.js'\nimport {\n  OffchainLookupError,\n  OffchainLookupResponseMalformedError,\n  OffchainLookupSenderMismatchError,\n} from '../errors/ccip.js'\nimport { HttpRequestError } from '../errors/request.js'\nimport type { Chain } from '../types/chain.js'\nimport type { Hex } from '../types/misc.js'\n\nimport type { Client } from '../clients/createClient.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport { decodeErrorResult } from './abi/decodeErrorResult.js'\nimport { encodeAbiParameters } from './abi/encodeAbiParameters.js'\nimport { isAddressEqual } from './address/isAddressEqual.js'\nimport { concat } from './data/concat.js'\nimport { isHex } from './data/isHex.js'\nimport { stringify } from './stringify.js'\n\nexport const offchainLookupSignature = '0x556f1830'\nexport const offchainLookupAbiItem = {\n  name: 'OffchainLookup',\n  type: 'error',\n  inputs: [\n    {\n      name: 'sender',\n      type: 'address',\n    },\n    {\n      name: 'urls',\n      type: 'string[]',\n    },\n    {\n      name: 'callData',\n      type: 'bytes',\n    },\n    {\n      name: 'callbackFunction',\n      type: 'bytes4',\n    },\n    {\n      name: 'extraData',\n      type: 'bytes',\n    },\n  ],\n} as const satisfies Abi[number]\n\nexport type OffchainLookupErrorType = ErrorType\n\nexport async function offchainLookup<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    blockNumber,\n    blockTag,\n    data,\n    to,\n  }: Pick<CallParameters, 'blockNumber' | 'blockTag'> & {\n    data: Hex\n    to: Address\n  },\n): Promise<Hex> {\n  const { args } = decodeErrorResult({\n    data,\n    abi: [offchainLookupAbiItem],\n  })\n  const [sender, urls, callData, callbackSelector, extraData] = args\n\n  try {\n    if (!isAddressEqual(to, sender))\n      throw new OffchainLookupSenderMismatchError({ sender, to })\n\n    const result = await ccipFetch({ data: callData, sender, urls })\n\n    const { data: data_ } = await call(client, {\n      blockNumber,\n      blockTag,\n      data: concat([\n        callbackSelector,\n        encodeAbiParameters(\n          [{ type: 'bytes' }, { type: 'bytes' }],\n          [result, extraData],\n        ),\n      ]),\n      to,\n    } as CallParameters)\n\n    return data_!\n  } catch (err) {\n    throw new OffchainLookupError({\n      callbackSelector,\n      cause: err as BaseError,\n      data,\n      extraData,\n      sender,\n      urls,\n    })\n  }\n}\n\nexport type CcipFetchErrorType = ErrorType\n\nexport async function ccipFetch({\n  data,\n  sender,\n  urls,\n}: { data: Hex; sender: Address; urls: readonly string[] }) {\n  let error = new Error('An unknown error occurred.')\n\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i]\n    const method = url.includes('{data}') ? 'GET' : 'POST'\n    const body = method === 'POST' ? { data, sender } : undefined\n\n    try {\n      const response = await fetch(\n        url.replace('{sender}', sender).replace('{data}', data),\n        {\n          body: JSON.stringify(body),\n          method,\n        },\n      )\n\n      let result: any\n      if (\n        response.headers.get('Content-Type')?.startsWith('application/json')\n      ) {\n        result = (await response.json()).data\n      } else {\n        result = (await response.text()) as any\n      }\n\n      if (!response.ok) {\n        error = new HttpRequestError({\n          body,\n          details: result?.error\n            ? stringify(result.error)\n            : response.statusText,\n          headers: response.headers,\n          status: response.status,\n          url,\n        })\n        continue\n      }\n\n      if (!isHex(result)) {\n        error = new OffchainLookupResponseMalformedError({\n          result,\n          url,\n        })\n        continue\n      }\n\n      return result\n    } catch (err) {\n      error = new HttpRequestError({\n        body,\n        details: (err as Error).message,\n        url,\n      })\n    }\n  }\n\n  throw error\n}\n","import type { Address } from 'abitype'\n\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport { isAddress } from './isAddress.js'\n\nexport type IsAddressEqualReturnType = boolean\nexport type IsAddressEqualErrorType = InvalidAddressErrorType | ErrorType\n\nexport function isAddressEqual(a: Address, b: Address) {\n  if (!isAddress(a, { strict: false }))\n    throw new InvalidAddressError({ address: a })\n  if (!isAddress(b, { strict: false }))\n    throw new InvalidAddressError({ address: b })\n  return a.toLowerCase() === b.toLowerCase()\n}\n"],"names":["OffchainLookupError","BaseError","constructor","_ref","_cause$metaMessages","callbackSelector","cause","data","extraData","sender","urls","super","shortMessage","metaMessages","length","map","url","getUrl","flat","Object","defineProperty","OffchainLookupResponseMalformedError","_ref2","result","stringify","OffchainLookupSenderMismatchError","_ref3","to","offchainLookupSignature","offchainLookupAbiItem","name","type","inputs","async","offchainLookup","client","blockNumber","blockTag","args","decodeErrorResult","abi","callData","a","b","isAddress","strict","InvalidAddressError","address","toLowerCase","isAddressEqual","error","Error","i","method","includes","body","undefined","_response$headers$get","response","fetch","replace","JSON","headers","get","startsWith","json","text","ok","_result","HttpRequestError","details","statusText","status","isHex","err","message","ccipFetch","data_","call","concat","encodeAbiParameters"],"sourceRoot":""}